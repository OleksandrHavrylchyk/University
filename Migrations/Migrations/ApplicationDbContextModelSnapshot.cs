// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using University.Migrations;

namespace University.Migrations.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(50000);

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SubjectId")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(50000);

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubjectId")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "1a33a295-3fcf-45cb-a5a5-a0d448d11012",
                            ConcurrencyStamp = "943ea836-6896-4fc2-9c5e-2b6fa601a6d7",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "d6a29138-46aa-41ff-8587-fad0a9bd0cfd",
                            ConcurrencyStamp = "15bbedd3-449e-4fdc-9fd2-a33a19430376",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("University.ApplicationUserEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegisteredDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "52ccc657-0d89-44c0-bb44-115adcd62d19",
                            AccessFailedCount = 0,
                            Age = 0,
                            ConcurrencyStamp = "a17c7a4f-5326-43ae-8439-d34bccc7ca77",
                            Email = "administrator@testuniversity.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMINISTRATOR@TESTUNIVERSITY.COM",
                            NormalizedUserName = "ADMINISTRATOR",
                            PasswordHash = "AQAAAAEAACcQAAAAEE7Flw/AKxeEL14XUIjXljxVH3Q7HLz9TrUnCU9vYhELa8Nn+suD0t7QgNmNlvLqOQ==",
                            PhoneNumberConfirmed = false,
                            RegisteredDate = new DateTime(2020, 3, 18, 14, 14, 4, 959, DateTimeKind.Utc).AddTicks(6687),
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Administrator"
                        },
                        new
                        {
                            Id = "067454ff-b104-49b2-9be8-decc5f978c34",
                            AccessFailedCount = 0,
                            Age = 19,
                            ConcurrencyStamp = "80e2d1cb-8bfa-4d54-b682-f27ae763ea20",
                            Email = "student1@testuniversity.com",
                            EmailConfirmed = true,
                            LastName = "Smith",
                            LockoutEnabled = false,
                            Name = "John",
                            NormalizedEmail = "STUDENT1@TESTUNIVERSITY.COM",
                            NormalizedUserName = "STUDENT1",
                            PasswordHash = "AQAAAAEAACcQAAAAEKKSqWwVj5F5Sqia/LLucXMFRgu6ieA4WE7BAbVwsEuDV0QCgdypF6Erq5CXuI2S1g==",
                            PhoneNumberConfirmed = false,
                            RegisteredDate = new DateTime(2020, 3, 18, 14, 14, 4, 959, DateTimeKind.Utc).AddTicks(6687),
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Student1"
                        },
                        new
                        {
                            Id = "58bfa728-6d50-49c1-a13e-accb82a84dc8",
                            AccessFailedCount = 0,
                            Age = 19,
                            ConcurrencyStamp = "f11e63b8-cd1d-4c11-b8ef-0758cfd11386",
                            Email = "student2@testuniversity.com",
                            EmailConfirmed = true,
                            LastName = "Jones",
                            LockoutEnabled = false,
                            Name = "David",
                            NormalizedEmail = "STUDENT2@TESTUNIVERSITY.COM",
                            NormalizedUserName = "STUDENT2",
                            PasswordHash = "AQAAAAEAACcQAAAAELvm/+3UrYLiNgWDl/tc31eTSPQdp8ZX4rEWO0AEeOldTY6/QljkI2+z2mVUNQxN0Q==",
                            PhoneNumberConfirmed = false,
                            RegisteredDate = new DateTime(2020, 3, 18, 14, 14, 4, 959, DateTimeKind.Utc).AddTicks(6687),
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Student2"
                        },
                        new
                        {
                            Id = "42bdbe6a-4684-42a7-91be-4837c80c5cf8",
                            AccessFailedCount = 0,
                            Age = 23,
                            ConcurrencyStamp = "96809f2d-c429-41d9-b8b3-f265f8bd55e0",
                            Email = "student3@testuniversity.com",
                            EmailConfirmed = true,
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            Name = "Michael",
                            NormalizedEmail = "STUDENT3@TESTUNIVERSITY.COM",
                            NormalizedUserName = "STUDENT3",
                            PasswordHash = "AQAAAAEAACcQAAAAEEnFTdwrVoPhkKJsmsDQ6lQ1gwFrhFy9SrFUCCWjl8O1Xm6W9PER689ImrqmhTc0Vw==",
                            PhoneNumberConfirmed = false,
                            RegisteredDate = new DateTime(2020, 3, 18, 14, 14, 4, 959, DateTimeKind.Utc).AddTicks(6687),
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Student3"
                        },
                        new
                        {
                            Id = "f7c792fc-9f75-4d23-8390-fa533ce9d3ca",
                            AccessFailedCount = 0,
                            Age = 18,
                            ConcurrencyStamp = "6b5b52f0-8b9c-4ffd-9c96-d8430a7b5fea",
                            Email = "student4@testuniversity.com",
                            EmailConfirmed = true,
                            LastName = "Lee",
                            LockoutEnabled = false,
                            Name = "Chris",
                            NormalizedEmail = "STUDENT4@TESTUNIVERSITY.COM",
                            NormalizedUserName = "STUDENT4",
                            PasswordHash = "AQAAAAEAACcQAAAAEIoQuRiwyBXZ/l3vmv4NAlq9UFQ6GOh9ETLqhsH9J6H2JIxWOqXYcQ2cX5zIFl3E2A==",
                            PhoneNumberConfirmed = false,
                            RegisteredDate = new DateTime(2020, 3, 18, 14, 14, 4, 959, DateTimeKind.Utc).AddTicks(6687),
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Student4"
                        },
                        new
                        {
                            Id = "bde70c9c-e937-4b20-a759-bf29b125e3d6",
                            AccessFailedCount = 0,
                            Age = 22,
                            ConcurrencyStamp = "936cb600-68df-4eff-91f7-8469afa6cd70",
                            Email = "student5@testuniversity.com",
                            EmailConfirmed = true,
                            LastName = "Brown",
                            LockoutEnabled = false,
                            Name = "Mike",
                            NormalizedEmail = "STUDENT5@TESTUNIVERSITY.COM",
                            NormalizedUserName = "STUDENT5",
                            PasswordHash = "AQAAAAEAACcQAAAAEDUEt8vjoixf67Ko1qOwBLJQXgM8lenpJeESOb5/568d2J7yFYzrjwIfRUxbD70syw==",
                            PhoneNumberConfirmed = false,
                            RegisteredDate = new DateTime(2020, 3, 18, 14, 14, 4, 959, DateTimeKind.Utc).AddTicks(6687),
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Student5"
                        },
                        new
                        {
                            Id = "79efe5db-e948-475d-b048-9ba9f76c7601",
                            AccessFailedCount = 0,
                            Age = 19,
                            ConcurrencyStamp = "7f4c3bda-d9a6-4b51-afd2-0e240e131938",
                            Email = "student6@testuniversity.com",
                            EmailConfirmed = true,
                            LastName = "Williams",
                            LockoutEnabled = false,
                            Name = "Mark",
                            NormalizedEmail = "STUDENT6@TESTUNIVERSITY.COM",
                            NormalizedUserName = "STUDENT6",
                            PasswordHash = "AQAAAAEAACcQAAAAEI2e4XirWNzCJgupMSEh0ZNzHzT0lPu37LuSP6zK89sduAs3NLmO92OVf+cMeLTgAw==",
                            PhoneNumberConfirmed = false,
                            RegisteredDate = new DateTime(2020, 3, 18, 14, 14, 4, 959, DateTimeKind.Utc).AddTicks(6687),
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Student6"
                        },
                        new
                        {
                            Id = "a29290e8-c5e4-400a-a45c-d09b6d05ca7c",
                            AccessFailedCount = 0,
                            Age = 21,
                            ConcurrencyStamp = "6acde338-cc3e-4f1b-b9a6-cdf716861ac8",
                            Email = "student7@testuniversity.com",
                            EmailConfirmed = true,
                            LastName = "Rodriguez",
                            LockoutEnabled = false,
                            Name = "Paul",
                            NormalizedEmail = "STUDENT7@TESTUNIVERSITY.COM",
                            NormalizedUserName = "STUDENT7",
                            PasswordHash = "AQAAAAEAACcQAAAAEGOyhecFjiNzhrKXEIQ153Q3kAgGlA6nT72R4AFV+rFHYalrhZ5bSmY2MfxFGjv+IQ==",
                            PhoneNumberConfirmed = false,
                            RegisteredDate = new DateTime(2020, 3, 18, 14, 14, 4, 959, DateTimeKind.Utc).AddTicks(6687),
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Student7"
                        },
                        new
                        {
                            Id = "c7c375aa-e0b1-412e-aa2d-de386338ab55",
                            AccessFailedCount = 0,
                            Age = 22,
                            ConcurrencyStamp = "5a3b95b4-5d77-404b-bead-df63f5c7dc6e",
                            Email = "student8@testuniversity.com",
                            EmailConfirmed = true,
                            LastName = "Garcia",
                            LockoutEnabled = false,
                            Name = "Daniel",
                            NormalizedEmail = "STUDENT8@TESTUNIVERSITY.COM",
                            NormalizedUserName = "STUDENT8",
                            PasswordHash = "AQAAAAEAACcQAAAAEN9Ccx34P9dbjJrvjhAvSsPN6k5nQn+Wcb07XhjjIWqfHJenABHQ+vscZItE9zACeg==",
                            PhoneNumberConfirmed = false,
                            RegisteredDate = new DateTime(2020, 3, 18, 14, 14, 4, 959, DateTimeKind.Utc).AddTicks(6687),
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Student8"
                        },
                        new
                        {
                            Id = "544d4acd-9310-4fb9-a6f6-0dfe2673a8f3",
                            AccessFailedCount = 0,
                            Age = 20,
                            ConcurrencyStamp = "829e9b15-7419-4c30-a05e-44f502868138",
                            Email = "student9@testuniversity.com",
                            EmailConfirmed = true,
                            LastName = "Gonzalez",
                            LockoutEnabled = false,
                            Name = "James",
                            NormalizedEmail = "STUDENT9@TESTUNIVERSITY.COM",
                            NormalizedUserName = "STUDENT9",
                            PasswordHash = "AQAAAAEAACcQAAAAEAo1U56HqE0J7UAX9lB3S7gZmLbBUomYhFCuJ8OQ1xN/tD/hVVhIctgXlO6SOXd73w==",
                            PhoneNumberConfirmed = false,
                            RegisteredDate = new DateTime(2020, 3, 18, 14, 14, 4, 959, DateTimeKind.Utc).AddTicks(6687),
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Student9"
                        },
                        new
                        {
                            Id = "e44a6e1b-da0f-4296-999f-1da1d995853a",
                            AccessFailedCount = 0,
                            Age = 18,
                            ConcurrencyStamp = "c624ad6d-d938-49b0-b5ae-92a30dc4b691",
                            Email = "student10@testuniversity.com",
                            EmailConfirmed = true,
                            LastName = "Lopez",
                            LockoutEnabled = false,
                            Name = "Maria",
                            NormalizedEmail = "STUDENT1@TESTUNIVERSITY.COM",
                            NormalizedUserName = "STUDENT10",
                            PasswordHash = "AQAAAAEAACcQAAAAENKVYone5UcBjHqnMuBl4krw3r8cR0cgejAv1M1I6evgCdBo6SGzovw2SAXevdC0Qw==",
                            PhoneNumberConfirmed = false,
                            RegisteredDate = new DateTime(2020, 3, 18, 14, 14, 4, 959, DateTimeKind.Utc).AddTicks(6687),
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Student10"
                        });
                });

            modelBuilder.Entity("University.CourseEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CourseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoverUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Duration")
                        .HasColumnType("real");

                    b.HasKey("ID");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CourseName = "Geometry and Trygonometry",
                            CoverUrl = "https://cdn01.alison-static.net/courses/1819/alison_courseware_intro_1819.jpg",
                            DateAdded = new DateTime(2020, 3, 18, 14, 14, 4, 958, DateTimeKind.Utc).AddTicks(7756),
                            Description = "Course Descriprion",
                            Duration = 5f
                        },
                        new
                        {
                            ID = 2,
                            CourseName = "Art",
                            CoverUrl = "https://news.artnet.com/app/news-upload/2019/12/5db820a075ba3-1500x826.jpg",
                            DateAdded = new DateTime(2020, 3, 18, 14, 14, 4, 958, DateTimeKind.Utc).AddTicks(7756),
                            Description = "Course Descriprion",
                            Duration = 12f
                        },
                        new
                        {
                            ID = 3,
                            CourseName = "English",
                            CoverUrl = "https://ichef.bbci.co.uk/images/ic/640x360/p03zh5tk.jpg",
                            DateAdded = new DateTime(2020, 3, 18, 14, 14, 4, 958, DateTimeKind.Utc).AddTicks(7756),
                            Description = "Course Descriprion",
                            Duration = 15f
                        },
                        new
                        {
                            ID = 4,
                            CourseName = "Programming",
                            CoverUrl = "https://prod-discovery.edx-cdn.org/media/course/image/d64fa565-a848-4f82-8c07-f2a2d98c3e4e-1cf577279324.small.jpeg",
                            DateAdded = new DateTime(2020, 3, 18, 14, 14, 4, 958, DateTimeKind.Utc).AddTicks(7756),
                            Description = "Course Descriprion",
                            Duration = 9f
                        },
                        new
                        {
                            ID = 5,
                            CourseName = "History",
                            CoverUrl = "https://www.thegreatcourses.com/media/catalog/product/cache/1/plus_image/800x451/0f396e8a55728e79b48334e699243c07/8/0/8080.1551362662.jpg",
                            DateAdded = new DateTime(2020, 3, 18, 14, 14, 4, 958, DateTimeKind.Utc).AddTicks(7756),
                            Description = "Course Descriprion",
                            Duration = 8f
                        },
                        new
                        {
                            ID = 6,
                            CourseName = "Chemistry",
                            CoverUrl = "https://www.scitecheuropa.eu/wp-content/uploads/2018/06/ST27-McGillU1-image-%C2%A9-iStock-Garsya.jpg",
                            DateAdded = new DateTime(2020, 3, 18, 14, 14, 4, 958, DateTimeKind.Utc).AddTicks(7756),
                            Description = "Course Descriprion",
                            Duration = 9f
                        });
                });

            modelBuilder.Entity("University.CourseSubscribersEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StudyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("CourseID");

                    b.HasIndex("UserId");

                    b.ToTable("CourseSubscribers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("University.ApplicationUserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("University.ApplicationUserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("University.ApplicationUserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("University.ApplicationUserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("University.CourseSubscribersEntity", b =>
                {
                    b.HasOne("University.CourseEntity", "Course")
                        .WithMany()
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("University.ApplicationUserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
